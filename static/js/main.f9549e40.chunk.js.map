{"version":3,"sources":["Components/constants.js","Components/actions.js","Components/Main/Header/ButtonBar/ButtonBar.jsx","Components/Main/Header/SearchBar/SearchBar.jsx","Components/Main/Header/Header.jsx","Components/Main/AnimeList/AnimeCard.jsx","Components/Main/AnimeList/AnimeList.jsx","Components/Main/AnimeList/FavoritesList.jsx","Components/Main/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["queryParts","apiURL","nameSearch","topRated","mostPop","topAir","resultsNum","pageLim","pageOff","sortTypes","urlConstructor","state","searchInput","searchType","pgOffset","fetcher","url","fetch","then","data","json","ButtonBar","props","className","value","onClick","sort","SearchBar","type","placeholder","onChange","search","to","Header","AnimeCard","id","children","event","target","parentElement","innerText","document","getElementById","AnimeList","style","backgroundColor","animeArr","map","item","key","favId","indexOf","color","fav","attributes","canonicalTitle","averageRating","popularityRank","ageRating","episodeCount","status","src","posterImage","medium","alt","synopsis","more","Favorites","favArr","Main","handleButtonSort","setState","searchResults","handleSearch","handleMore","concat","handleFav","localStorage","clear","favorites","favCopy","idCopy","splice","length","JSON","parse","getItem","this","setItem","stringify","exact","path","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9549e40.chunk.js","sourcesContent":["export const queryParts = {\r\n    apiURL: 'https://kitsu.io/api/edge/anime?',\r\n    nameSearch: '&filter[text]=',\r\n    topRated: '&sort=ratingRank',\r\n    mostPop: '&sort=popularityRank',\r\n    topAir: '&filter[status]=current&sort=popularityRank',\r\n    resultsNum: 16,\r\n    pageLim: '&page[limit]=',\r\n    pageOff: '&page[offset]=',\r\n}\r\n\r\nexport const sortTypes = {\r\n    byRating: 'topRated',\r\n    byPop: 'mostPop',\r\n    byTopAir: 'topAir'    \r\n}","import { queryParts } from './constants'\r\n\r\n\r\nexport const urlConstructor = (state) => {\r\n    if (state.searchInput === '') {        \r\n        return queryParts.apiURL + queryParts[state.searchType] + queryParts.pageLim + queryParts.resultsNum + queryParts.pageOff + state.pgOffset\r\n    }\r\n\r\n    else {\r\n        return queryParts.apiURL + queryParts.nameSearch + state.searchInput + queryParts.pageLim + queryParts.resultsNum + queryParts.pageOff + state.pgOffset\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const fetcher = (url) => {    \r\n    return (\r\n        fetch(url)\r\n            .then(data => data.json())\r\n            .then(data => data.data)\r\n    )\r\n}","import React from 'react'\r\nimport { sortTypes } from '../../../constants'\r\nimport './buttonBar.css'\r\n\r\nfunction ButtonBar(props) {\r\n    return (\r\n        <div className='buttonBar'>\r\n            <button value={sortTypes.byRating} onClick={props.sort}>\r\n                Top rated\r\n            </button>\r\n            <button value={sortTypes.byPop} onClick={props.sort}>\r\n                Most popular\r\n            </button>\r\n            <button value={sortTypes.byTopAir} onClick={props.sort}>\r\n                Top Airing\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonBar","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './SearchBar.css'\r\n\r\nexport function SearchBar(props) {\r\n    return (\r\n        <div className='searchBar'>\r\n            <input className='input' type=\"text\" placeholder='Search anime' onChange={props.search} />\r\n            <Link className='link' to='/SimpleAnimeSearcher'>Home</Link>\r\n            <Link className='link' to='/favorites'>Favorites</Link>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport ButtonBar from './ButtonBar/ButtonBar'\r\nimport { SearchBar } from './SearchBar/SearchBar'\r\nimport './Header.css'\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className='header'>\r\n            <SearchBar search={props.search} />\r\n            <ButtonBar sort={props.sort} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './Card.css'\r\n\r\nfunction AnimeCard(props) {\r\n\r\n    const handleGrow = (event) => {\r\n        if(event.target.parentElement.className === 'card') {\r\n            event.target.parentElement.className = 'cardGrow'\r\n            event.target.innerText = 'Hide'\r\n            document.getElementById(event.target.parentElement.id + 'desc').className = 'desc'\r\n        }\r\n        else if(event.target.parentElement.className === 'cardGrow') {\r\n            event.target.parentElement.className = 'card'\r\n            event.target.innerText = 'More info'\r\n            document.getElementById(event.target.parentElement.id + 'desc').className = 'descHide'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='card' id={props.id}>\r\n            {props.children}\r\n            <button className='cardButton' onClick={handleGrow}>More info</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnimeCard","import React from 'react'\r\nimport AnimeCard from './AnimeCard'\r\nimport './List.css'\r\n\r\nexport function AnimeList(props) {    \r\n\r\n    return (\r\n        <div style={{ backgroundColor: '#000000' }}>\r\n            <div className='list'>\r\n                {props.animeArr.map((item) =>\r\n                    <AnimeCard key={item.id} id={item.id}>\r\n                        <h3 className='cardH'>\r\n                            <span className='favIcon'>\r\n                                {props.favId.indexOf(item.id) === -1 ?\r\n                                    <i style={{ color: '#FF851B' }} className=\"far fa-star\" onClick={() => { props.fav(item) }}></i>\r\n                                    : <i style={{ color: '#FF851B' }} className=\"fas fa-star\" onClick={() => { props.fav(item) }}></i>\r\n                                }\r\n                            </span>\r\n                                Title: {item.attributes.canonicalTitle}\r\n                        </h3>\r\n                        <p>\r\n                            Avrage Rating:   {item.attributes.averageRating}\r\n                        </p>\r\n                        <p>\r\n                            Popularity rank: {item.attributes.popularityRank}\r\n                        </p>\r\n                        <p>\r\n                            Age rating: {item.attributes.ageRating}\r\n                        </p>\r\n                        <p>\r\n                            Number of episodes: {item.attributes.episodeCount}\r\n                        </p>\r\n                        <p>\r\n                            Status: {item.attributes.status}\r\n                        </p>\r\n                        <img className='img' src={item.attributes.posterImage.medium} alt=\"\" />\r\n                        <p className='descHide' id={item.id + 'desc'}>\r\n                            Synopsis: {item.attributes.synopsis}\r\n                        </p>\r\n                    </AnimeCard>\r\n                )}\r\n            </div>\r\n            <button onClick={props.more}>Show more</button>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}","import React from 'react'\r\nimport AnimeCard from './AnimeCard'\r\nimport './List.css'\r\nexport function Favorites(props) {\r\n    return (        \r\n            <div className='list'>\r\n                {props.favArr.map((item) =>\r\n                    <AnimeCard key={item.attributes.canonicalTitle + 'fav'} id={item.id}>\r\n                        <h3>\r\n                            <span className='favIcon'>\r\n                                <i style={{color: '#FF851B'}} className=\"fas fa-star\" onClick={() => props.fav(item)}></i>\r\n                            </span>\r\n                            Title: {item.attributes.canonicalTitle}\r\n                        </h3>\r\n                        <p>\r\n                            Avrage Rating:   {item.attributes.averageRating}\r\n                        </p>\r\n                        <p>\r\n                            Age rating: {item.attributes.ageRating}\r\n                        </p>\r\n                        <p>\r\n                            Number of episodes: {item.attributes.episodeCount}\r\n                        </p>\r\n                        <p>\r\n                            Status: {item.attributes.status}\r\n                        </p>\r\n                        <img className='img' src={item.attributes.posterImage.medium} alt=\"\" />\r\n                        <p className='descHide' id={item.id + 'desc'}>\r\n                            Synopsis: {item.attributes.synopsis}\r\n                        </p> \r\n                    </AnimeCard>\r\n                )}\r\n            </div>        \r\n\r\n    )\r\n}","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from 'react-router-dom'\r\nimport { urlConstructor, fetcher } from '../actions'\r\nimport Header from './Header/Header'\r\nimport { queryParts, sortTypes } from '../constants'\r\nimport { AnimeList } from './AnimeList/AnimeList'\r\nimport { Favorites } from './AnimeList/FavoritesList'\r\n\r\nexport class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            searchInput: '',\r\n            searchType: sortTypes.byPop,\r\n            searchResults: [],\r\n            favorites: [],\r\n            favId: [],\r\n            pgOffset: 0,\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(localStorage.length > 0)    {\r\n            let fuck = JSON.parse(localStorage.getItem('1'))\r\n            this.setState({favorites: JSON.parse(localStorage.getItem('1')),\r\n                            favId: JSON.parse(localStorage.getItem('2'))\r\n        })\r\n        }\r\n        fetcher(urlConstructor(this.state))\r\n            .then(data => this.setState({ searchResults: data }))                   \r\n    }   \r\n\r\n    componentDidUpdate() {\r\n        if(this.state.favorites.length > 0) {\r\n            localStorage.setItem('1', JSON.stringify(this.state.favorites))\r\n            localStorage.setItem('2', JSON.stringify(this.state.favId))\r\n        }        \r\n    }\r\n\r\n    handleButtonSort = (event) => {\r\n        this.setState(\r\n            {\r\n                searchType: event.target.value,\r\n                searchInput: '',\r\n                pgOffset: 0\r\n            },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState({ searchResults: data }))\r\n            }\r\n        )\r\n    }\r\n\r\n    handleSearch = (event) => {\r\n        this.setState(\r\n            {\r\n                searchInput: event.target.value,\r\n                pgOffset: 0\r\n            },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState({ searchResults: data }))\r\n            }\r\n        )\r\n    }\r\n\r\n    handleMore = () => {\r\n        this.setState(\r\n            { pgOffset: this.state.pgOffset + queryParts.resultsNum },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState(\r\n                        { searchResults: this.state.searchResults.concat(data) })\r\n                    )\r\n            }\r\n        )\r\n    }\r\n\r\n    handleFav = (item) => { \r\n        localStorage.clear()      \r\n        if (this.state.favorites.indexOf(item) === -1 && this.state.favId.indexOf(item.id) === -1) {\r\n            this.setState({ \r\n                favorites: this.state.favorites.concat([item]),\r\n                favId: this.state.favId.concat([item.id])\r\n            })\r\n        }\r\n        else {\r\n            let favCopy = this.state.favorites;\r\n            let idCopy = this.state.favId;\r\n            favCopy.splice(idCopy.indexOf(item.id), 1)\r\n            idCopy.splice(idCopy.indexOf(item.id), 1)\r\n            this.setState({ favorites: favCopy, favId: idCopy })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Header sort={this.handleButtonSort} search={this.handleSearch} />\r\n                <Switch>\r\n                    <Route exact path='/SimpleAnimeSearcher'>\r\n                        <AnimeList\r\n                            animeArr={this.state.searchResults} more={this.handleMore} fav={this.handleFav}\r\n                            favArr={this.state.favorites}\r\n                            favId={this.state.favId}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path='/favorites'>\r\n                        <Favorites favArr={this.state.favorites} fav={this.handleFav} />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { Main } from './Components/Main/Main'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}