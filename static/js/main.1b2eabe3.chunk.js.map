{"version":3,"sources":["Components/constants.js","Components/actions.js","Components/Main/Header/ButtonBar/ButtonBar.jsx","Components/Main/Header/SearchBar/SearchBar.jsx","Components/Main/Header/Header.jsx","Components/Main/AnimeList/AnimeCard.jsx","Components/Main/AnimeList/AnimeList.jsx","Components/Main/AnimeList/FavoritesList.jsx","Components/Main/Categories/Categories.jsx","Components/Main/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["queryParts","apiURL","nameSearch","topRated","mostPop","topAir","resultsNum","pageLim","pageOff","categories","filter","categSearch","sortTypes","urlConstructor","state","searchInput","searchType","pgOffset","fetcher","url","fetch","method","headers","then","data","json","ButtonBar","props","className","value","onClick","sort","to","SearchBar","id","type","placeholder","onChange","search","Header","exact","path","AnimeCard","children","event","target","parentElement","innerText","document","getElementById","AnimeList","style","backgroundColor","animeArr","map","item","key","favId","indexOf","color","fav","attributes","canonicalTitle","averageRating","popularityRank","ageRating","episodeCount","status","src","posterImage","medium","alt","synopsis","more","Favorites","favArr","propTypes","PropTypes","array","Categories","catSearch","title","Main","handleButtonSort","setState","categoryName","searchResults","handleSearch","func","delay","inDebounce","context","this","args","arguments","clearTimeout","setTimeout","apply","debounce","handleMore","concat","handleSearchByCat","name","console","log","handleFav","localStorage","clear","favorites","favCopy","idCopy","splice","length","JSON","parse","getItem","setItem","stringify","handleGetCategories","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1b2eabe3.chunk.js","sourcesContent":["export const queryParts = {\r\n    apiURL: 'https://kitsu.io/api/edge/anime?',\r\n    nameSearch: '&filter[text]=',\r\n    topRated: '&sort=ratingRank',\r\n    mostPop: '&sort=popularityRank',\r\n    topAir: '&filter[status]=current&sort=popularityRank',\r\n    resultsNum: 16,\r\n    pageLim: '&page[limit]=',\r\n    pageOff: '&page[offset]=',\r\n    categories: 'https://kitsu.io/api/edge/categories?sort=-totalMediaCount&page[limit]=60&page[offset]=0',\r\n    filter: '&fields[anime]=id,posterImage,titles,canonicalTitle,averageRating,popularityRank,ageRating,episodeCount,status,synopsis',\r\n    categSearch : 'filter[categories]=',   \r\n}\r\n\r\nexport const sortTypes = {\r\n    byRating: 'topRated',\r\n    byPop: 'mostPop',\r\n    byTopAir: 'topAir'    \r\n}","import { queryParts } from './constants'\r\n\r\n\r\nexport const urlConstructor = (state) => {\r\n    if (state.searchInput === '') {\r\n        return queryParts.apiURL + queryParts[state.searchType] + queryParts.pageLim + queryParts.resultsNum + queryParts.pageOff + state.pgOffset + queryParts.filter\r\n    }\r\n\r\n    // else if(state.categoryName.length > 0) {\r\n    //     console.log('yes')\r\n    //     return queryParts.apiURL + queryParts.categSearch + state.categoryName + queryParts.mostPop + queryParts.pageLim + queryParts.resultsNum + queryParts.pageOff + state.pgOffset + queryParts.filter\r\n    // }\r\n\r\n    else {\r\n        return queryParts.apiURL + state.searchInput + queryParts.pageLim + queryParts.resultsNum + queryParts.pageOff + state.pgOffset + queryParts.filter\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const fetcher = (url) => {\r\n    return (\r\n        fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/vnd.api+json',\r\n                'Content-Type': 'application/vnd.api+json',\r\n            }\r\n        })\r\n            .then(data => data.json())\r\n            .then(data => data.data)\r\n    )\r\n}\r\n\r\nexport const debounce = (func, delay) => {\r\n    let inDebounce\r\n    return function() {\r\n      const context = this\r\n      const args = arguments\r\n      clearTimeout(inDebounce)\r\n      inDebounce = setTimeout(() => func.apply(context, args), delay)\r\n    }\r\n  }","import React from 'react'\r\nimport { sortTypes } from '../../../constants'\r\nimport { Link } from 'react-router-dom'\r\nimport './buttonBar.css'\r\n\r\nfunction ButtonBar(props) {\r\n    return (\r\n        <div className='buttonBar'>\r\n            <button value={sortTypes.byRating} onClick={props.sort}>\r\n                Top rated\r\n            </button>\r\n            <button value={sortTypes.byPop} onClick={props.sort}>\r\n                Most popular\r\n            </button>\r\n            <button value={sortTypes.byTopAir} onClick={props.sort}>\r\n                Top Airing\r\n            </button>\r\n            <Link className='linkButton' to='/SimpleAnimeSearcher/categories'>\r\n                Categories\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonBar","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './SearchBar.css'\r\n\r\nexport function SearchBar(props) {\r\n    return (\r\n        <div className='searchBar'>\r\n            <input className='input' id='search' type=\"text\" placeholder='Search anime' onChange={props.search} />\r\n            <Link className='link' to='/SimpleAnimeSearcher'>Home</Link>\r\n            <Link className='link' to='/SimpleAnimeSearcher/favorites'>Favorites</Link>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {    \r\n    Switch,\r\n    Route,\r\n} from 'react-router-dom'\r\nimport ButtonBar from './ButtonBar/ButtonBar'\r\nimport { SearchBar } from './SearchBar/SearchBar'\r\nimport './Header.css'\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className='header'>\r\n            <SearchBar search={props.search} />\r\n            <Switch>\r\n                <Route exact path='/SimpleAnimeSearcher'>\r\n                    <ButtonBar sort={props.sort} categories={props.categories} />\r\n                </Route>\r\n            </Switch >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\n","import React from 'react'\r\nimport './Card.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction AnimeCard(props) {\r\n\r\n    const handleGrow = (event) => {\r\n        if(event.target.parentElement.className === 'card') {\r\n            event.target.parentElement.className = 'cardGrow'\r\n            event.target.innerText = 'Hide'\r\n            document.getElementById(event.target.parentElement.id + 'desc').className = 'desc'\r\n        }\r\n        else if(event.target.parentElement.className === 'cardGrow') {\r\n            event.target.parentElement.className = 'card'\r\n            event.target.innerText = 'More info'\r\n            document.getElementById(event.target.parentElement.id + 'desc').className = 'descHide'\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='card' id={props.id}>\r\n            {props.children}\r\n            <button className='cardButton' onClick={handleGrow}>More info</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnimeCard\r\n\r\nAnimeCard.propTypes = {\r\n    id: PropTypes.string\r\n}","import React from 'react'\r\nimport AnimeCard from './AnimeCard'\r\nimport './List.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport function AnimeList(props) {    \r\n\r\n    return (\r\n        <div style={{ backgroundColor: '#000000' }}>\r\n            <div className='list'>\r\n                {props.animeArr.map((item) =>\r\n                    <AnimeCard key={item.id} id={item.id}>\r\n                        <h3 className='cardH'>\r\n                            <span className='favIcon'>\r\n                                {props.favId.indexOf(item.id) === -1 ?\r\n                                    <i style={{ color: '#FF851B' }} className=\"far fa-star\" onClick={() => { props.fav(item) }}></i>\r\n                                    : <i style={{ color: '#FF851B' }} className=\"fas fa-star\" onClick={() => { props.fav(item) }}></i>\r\n                                }\r\n                            </span>\r\n                                Title: {item.attributes.canonicalTitle}\r\n                        </h3>\r\n                        <p>\r\n                            Avrage Rating:   {item.attributes.averageRating}\r\n                        </p>\r\n                        <p>\r\n                            Popularity rank: {item.attributes.popularityRank}\r\n                        </p>\r\n                        <p>\r\n                            Age rating: {item.attributes.ageRating}\r\n                        </p>\r\n                        <p>\r\n                            Number of episodes: {item.attributes.episodeCount}\r\n                        </p>\r\n                        <p>\r\n                            Status: {item.attributes.status}\r\n                        </p>\r\n                        <img className='img' src={item.attributes.posterImage.medium} alt=\"\" />\r\n                        <p className='descHide' id={item.id + 'desc'}>\r\n                            Synopsis: {item.attributes.synopsis}\r\n                        </p>\r\n                    </AnimeCard>\r\n                )}\r\n            </div>\r\n            <button onClick={props.more}>Show more</button>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nAnimeList.propTypes = {\r\n    animeArr: PropTypes.array,\r\n    more: PropTypes.func,\r\n    favId: PropTypes.array,\r\n}","import React from 'react'\r\nimport AnimeCard from './AnimeCard'\r\nimport './List.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport function Favorites(props) {\r\n    return (        \r\n            <div className='list'>\r\n                {props.favArr.map((item) =>\r\n                    <AnimeCard key={item.attributes.canonicalTitle + 'fav'} id={item.id}>\r\n                        <h3>\r\n                            <span className='favIcon'>\r\n                                <i style={{color: '#FF851B'}} className=\"fas fa-star\" onClick={() => props.fav(item)}></i>\r\n                            </span>\r\n                            Title: {item.attributes.canonicalTitle}\r\n                        </h3>\r\n                        <p>\r\n                            Avrage Rating:   {item.attributes.averageRating}\r\n                        </p>\r\n                        <p>\r\n                            Age rating: {item.attributes.ageRating}\r\n                        </p>\r\n                        <p>\r\n                            Number of episodes: {item.attributes.episodeCount}\r\n                        </p>\r\n                        <p>\r\n                            Status: {item.attributes.status}\r\n                        </p>\r\n                        <img className='img' src={item.attributes.posterImage.medium} alt=\"\" />\r\n                        <p className='descHide' id={item.id + 'desc'}>\r\n                            Synopsis: {item.attributes.synopsis}\r\n                        </p> \r\n                    </AnimeCard>\r\n                )}\r\n            </div>        \r\n\r\n    )\r\n}\r\n\r\nAnimeCard.propTypes = {\r\n    favArr: PropTypes.array\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Categories.css'\r\n\r\nexport function Categories(props) {\r\n    return (\r\n        <div className='categories'>\r\n            <div className='catHead'>\r\n                Categories\r\n            </div>\r\n            <div className='categoriesList'>\r\n                {props.categories.map(item => <Link\r\n                    to='/SimpleAnimeSearcher'\r\n                    className='catLink'\r\n                    key={item.id}\r\n                    onClick={() => { props.catSearch(item.attributes.title) }}>\r\n                    {item.attributes.title}\r\n                </Link>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from 'react-router-dom'\r\nimport { urlConstructor, fetcher, debounce } from '../actions'\r\nimport Header from './Header/Header'\r\nimport { queryParts, sortTypes } from '../constants'\r\nimport { AnimeList } from './AnimeList/AnimeList'\r\nimport { Favorites } from './AnimeList/FavoritesList'\r\nimport { Categories } from './Categories/Categories'\r\n\r\nexport class Main extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            searchInput: '',\r\n            searchType: sortTypes.byPop,\r\n            searchResults: [],\r\n            favorites: [],\r\n            favId: [],\r\n            categories: [],\r\n            pgOffset: 0,\r\n            categoryName: ''\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (localStorage.length > 0) {\r\n            this.setState({\r\n                favorites: JSON.parse(localStorage.getItem('items')),\r\n                favId: JSON.parse(localStorage.getItem('ids'))\r\n            })\r\n        }\r\n        fetcher(urlConstructor(this.state))\r\n            .then(data => this.setState({ searchResults: data }))\r\n        fetcher(queryParts.categories)\r\n            .then(data => this.setState(\r\n                { categories: data }), console.log(this.state))\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.favorites.length > 0) {\r\n            localStorage.setItem('items', JSON.stringify(this.state.favorites))\r\n            localStorage.setItem('ids', JSON.stringify(this.state.favId))\r\n        }\r\n    }\r\n\r\n    handleButtonSort = (event) => {\r\n        this.setState(\r\n            {\r\n                searchType: event.target.value,\r\n                searchInput: '',\r\n                pgOffset: 0,\r\n                categoryName: ''\r\n            },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState({ searchResults: data }))\r\n            }\r\n        )\r\n    }\r\n\r\n    handleSearch = debounce(() => {\r\n        this.setState(\r\n            {\r\n                searchInput: queryParts.nameSearch + document.getElementById('search').value,\r\n                pgOffset: 0,\r\n                categoryName: ''\r\n            },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState({ searchResults: data }))\r\n            }\r\n        )\r\n    }, 700)\r\n\r\n    handleMore = () => {\r\n        this.setState(\r\n            { pgOffset: this.state.pgOffset + queryParts.resultsNum },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState(\r\n                        { searchResults: this.state.searchResults.concat(data) })\r\n                    )\r\n            }\r\n        )\r\n    }\r\n\r\n    handleSearchByCat = (name) => {\r\n        console.log(this.state)\r\n        this.setState(\r\n            {\r\n                searchInput: queryParts.categSearch + name + queryParts.mostPop,                \r\n            },\r\n            () => {\r\n                fetcher(urlConstructor(this.state))\r\n                    .then(data => this.setState({ searchResults: data }))\r\n            }\r\n        )\r\n    }\r\n\r\n    // Adds clicked items to favorites and also removes them\r\n    handleFav = (item) => {\r\n        localStorage.clear()\r\n        if (this.state.favorites.indexOf(item) === -1 && this.state.favId.indexOf(item.id) === -1) {\r\n            this.setState({\r\n                favorites: this.state.favorites.concat([item]),\r\n                favId: this.state.favId.concat([item.id])\r\n            })\r\n        }\r\n        else {\r\n            let favCopy = this.state.favorites;\r\n            let idCopy = this.state.favId;\r\n            favCopy.splice(idCopy.indexOf(item.id), 1)\r\n            idCopy.splice(idCopy.indexOf(item.id), 1)\r\n            this.setState({ favorites: favCopy, favId: idCopy })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Header sort={this.handleButtonSort} search={this.handleSearch} categories={this.handleGetCategories} />\r\n                <Switch>\r\n                    <Route exact path='/SimpleAnimeSearcher'>\r\n                        <AnimeList\r\n                            animeArr={this.state.searchResults} more={this.handleMore} fav={this.handleFav}\r\n                            favArr={this.state.favorites}\r\n                            favId={this.state.favId}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path='/SimpleAnimeSearcher/favorites'>\r\n                        <Favorites favArr={this.state.favorites} fav={this.handleFav} />\r\n                    </Route>\r\n                    <Route exact path='/SimpleAnimeSearcher/categories'>\r\n                        <Categories categories={this.state.categories} catSearch={this.handleSearchByCat} />\r\n                    </Route>\r\n\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { Main } from './Components/Main/Main'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}